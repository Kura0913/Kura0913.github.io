[{"title":"使用AirSim Plugin生成VR detection dataset","url":"/2024/03/20/AirSimGenerateDataset/","content":"# 前言\n之前接觸到object detection相關的研究，在過程中遇到Dataset不足的問題，因此教授想嘗試看看使用VR環境來產生Dataset來補足資料，並驗證看看對於最後真實資料的detection是否有幫助\n\n而我就負責製作Dataset的生成工具，此篇紀錄我是如何生成VR Dataset\n\n<!-- more -->\n\n# 環境配置\n* Unreal Engine 5\n* Python 3.9\n* numpy 1.21.6\n* AirSim API\n* wheel 0.42.0\n* opencv-python\n\n上述的環境配置、安裝可以參考以下文章：\n\n* [Unreal Engine install](https://kura0913.github.io/2023/07/07/UnrealEngineInstall/)\n\n* [AirSim Plugin install](https://kura0913.github.io/2023/07/08/InstallAirSimPlugin/)\n\n* [AirSIm API install](https://kura0913.github.io/2023/07/07/UnrealEngineInstall/)\n\n# 過程\n\n### 規劃\n由於實驗室使用yolo做訓練，因此生成的資料格式會以yolo格式為主\n\nAirSim其實本身有提供生成2D bounding box的API，背後的演算法是由3D bounding box轉換而來，然而AirSim的3D bounding box其實是有歪斜的問題，因此最後得到的2D bounding box會有過大的問題\n\n就上述的原因，必須換另一種作法，這邊我想利用egmentation mask作為輔助，透過mask來找到物體的邊界，再依照邊界畫出bounding box\n### 設定生成Classes\n首先要標記生成的Classes，可以使用下列的code來獲取classes對應的actor\n\n其中 **{object_name}[\\w]\\*** 的意思是，在level中所有以 **object_name** 為開頭的Actor、Mesh，都會被標記為該class，因此在為level中的物件取名字的時候，務必做好規劃\n\n```python\nimport airsim\nimport cv2\n\nclient = airsim.VehicleClient()\n\nobjects = client.simListSceneObjects(f'{object_name}[\\w]*')\n```\n\n接下來要為每個物件做mask的顏色設定，其中255為AirSim的預設mask顏色的數量，因此要做程式保護避免error\n\n```python\n\nfor mesh_name in objects:\n    if mask_color_cnt + 1 < 255:\n        client.simSetSegmentationObjectID(mesh_name, mask_color_cnt + 1, True)\n```\n\n\n### 取得Scene、Segmentation mask\n\n接著必須先取得兩張圖片，分別是Scene以及Segmentation mask的圖片，而AirSim得到的資料一開始是string，必須轉換成uint8，且原始圖片要多儲存一份，之後用來畫上bounding box，程式如下：\n\n```python\nimport airsim\nimport cv2\n\n# get images response\nori_response, seg_response,  = client.simGetImages(\n    [airsim.ImageRequest(camera_name, airsim.ImageType.Scene), airsim.ImageRequest(camera_name, airsim.ImageType.Segmentation)]\n)\n\n# get original image from airsim\nori_raw_image = ori_response.image_data_uint8\n# get segmentation image from airsim\nseg_raw_image = seg_response.image_data_uint8\n\n# trans to uint_8 array form\nbbox_img_ary = cv2.imdecode(airsim.string_to_uint8_array(ori_raw_image), cv2.IMREAD_COLOR)\nori_img_ary = cv2.imdecode(airsim.string_to_uint8_array(ori_raw_image), cv2.IMREAD_COLOR)\nseg_img_ary = cv2.imdecode(airsim.string_to_uint8_array(seg_raw_image), cv2.IMREAD_COLOR)\n```\n\nori_img_ary、seg_img_ary輸出後儲存的圖片分別如下：\n\n\n<div style=\"display:inline-block\">\n<center class='half'>\n<image src=\"https://github.com/Kura0913/Blog-image/blob/main/AirSimGenerateDataset/scene.jpg?raw=true\" alt=\"image1\" width=\"850\"><image src=\"https://github.com/Kura0913/Blog-image/blob/main/AirSimGenerateDataset/mask.jpg?raw=true\" alt=\"image2\" width=\"850\">\n</center>\n</div>\n\n### 繪製bounding box\n\n為每個物件標上各自的mask之後，就可以開始生成bounding box，而這邊最簡單的方法就是找到對應顏色的最邊邊的像素點，依照這些像素點的座標去算出四邊形的四個頂點座標\n\n例如：下圖中紅色閃電最邊界的點的座標，就能知道可以剛好框住這個圖案的四邊形頂點分別為：\n\n\n\n\n\n$ (x_2, y_1), (x_3, y_1) ,(x_2, y_3), (x_3, y_3) $\n\n\n\n\n\n\n![](https://github.com/Kura0913/Blog-image/blob/main/AirSimGenerateDataset/findbbox.png?raw=true)\n\n可以利用下面的API來得到bounding box的資料，x和y代表bounding box左上角的頂點座標，w和h分別代表四邊形的寬和長\n\n```python\nimport cv2\n\n#contour:mask infomation\nx, y, w, h = cv2.boundingRect(contour)\n```\n\n之後將座標轉換為Yolo格式 x, y, w, h\n\n- x, y 代表該bndBox的中心座標與圖片寬高的比值，是bndBox歸一化後的中心座標\n- w, h代表該bndBox的寬高與輸入圖像寬高的比值，是bndBox歸一化後的寬高座標\n\n```python\n# Calculate the relative coordinates of the center of the bounding box (normalized coordinates)\ncenter_x = (x + w / 2) / image.shape[1]\ncenter_y = (y + h / 2) / image.shape[0]\nrelative_width = w / image.shape[1]\nrelative_height = h / image.shape[0]\n```\n\n最後將所有的bounding box畫到先前預存的原圖上就可以了\n# 結果\n最後生成出來的資料如圖：\n\n![](https://github.com/Kura0913/Blog-image/blob/main/AirSimGenerateDataset/bbox.jpg?raw=true)\n\n\n# Github\n如果想試用看看生成工具可以到我的[github](https://github.com/Kura0913/VR-Dataset-Generator.git)下載，裡面也有我做的VR環境執行檔下載連結\n\n如果有發現bug可以在issue通知我","tags":["Unreal Engine","Airsim"],"categories":["Unreal Engine","AirSim","Generate VR Dataset"]},{"title":"AirSim API","url":"/2024/03/20/AirSimAPI/","content":"# 前言\n\n先前介紹過AirSim plugin的安裝以及用途，而AirSim提供了許多的API，可以透過python來做各種情境的模擬，這篇將會介紹如何安裝、使用AirSim API\n\n<!-- more -->\n\n# 環境配置\n\n環境的建置可以自行選擇是否建立在Anaconda，以方便作環境的管理，以下是AirSim的環境配置：\n\n* python： 3.5 or later versions\n* numpy 1.21.6\n* [AirSim API](https://microsoft.github.io/AirSim/apis/)\n* wheel 0.42.0\n* opencv-python\n\n配置好python的版本之後，依照下列順序安裝即可:\n\n```cmd\npip install numpy==1.21.6\npip install msgpack-rpc-python\npip install wheel==0.42.0\npip install airsim\n```\n\n# 使用\n\n安裝完成後，可以執行看看AirSim提供的測試code，確認環境是否有安裝成功\n\n**執行程式前請先在專案開始執行該LEVEL，再執行測試code，否則API會連接失敗**\n\n測試code的位置：\n* UE4：.\\AirSim\\PythonClient\\car\\hello_car.py\n* UE5：.\\Colosseum\\PythonClient\\car\\hello_car.py\n\n執行成功後會顯示以下訊息：\n\n![](https://github.com/Kura0913/blog-file/blob/main/AirSimAPI/1.png?raw=true)\n\n且車會以API的指令做移動","tags":["Unreal Engine","Airsim"],"categories":["Unreal Engine","AirSim","AirSim API install"]},{"title":"UE5 Retarget System","url":"/2023/09/23/RetargetSystem/","content":"# 前言\n當你製作一個遊戲，覺得預設的人物太單調時，肯定會想要幫他換上新的模型，但是匯入新模型會面臨到的問題是：兩個骨架的動畫是無法共用的，而在UE4，只能透過匯入骨架結構相近的模型，用相對\"碰運氣\"的方式去做骨架的Retarget，而UE5提供了新的Retarget System，可以細部調整骨架對接的方式，讓兩個骨架之間的動畫可以互相通用\n<!-- more -->\n# 匯入模型\n網路上免費的模型資源少之又少，但好險有Adobe的[Mixamo](https://www.mixamo.com/#/?page=1&type=Character)，提供了許多免費的模型與動畫\n這邊先下載好一個模型及動畫後，開啟專案，到達要匯入的資料夾後，點選左上角的\"import\"，將要匯入的FBX檔全部選取\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/1.png?raw=true)\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/2.png?raw=true)\n\n接下來會跳出以下視窗，請注意**一定要勾選\"Import Animation\"動畫才會匯入**，確認完之後選擇\"Import All\"\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/3.png?raw=true)\n\nImport後可能會跳以下Log訊息，他的意思是找不到合適的骨架，原因是因為你匯入的骨架一開始並沒有在你的專案中，導致動畫無法有對應的骨架匯入，因此到整個匯入流程結束後，成功匯入的只有骨架而沒有動畫\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/4.png?raw=true)\n\n而log中有提到已經建立骨架請重新匯入，這次匯入請在Skeleton選擇剛剛匯入的新骨架，勾選\"Import Animation\"，再次匯入\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/5.png?raw=true)\n\n匯入完成後就會出現很多動畫檔了，將全部的檔案儲存\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/6.png?raw=true)\n\n# Retarget System\n接下來就要使用Retarget System將兩個不同的骨架動畫做對接\n## Set IK Rig\n\n### ★\n資料夾空白處右鍵：Animation -> IK Rig -> IK Rig，建立完檔案後打開\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/7.png?raw=true)\n\n右邊欄有個Preview Skeleton，選擇想要對接的骨架\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/8.png?raw=true)\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/9.png?raw=true)\n\n選擇完成後，要先設定骨架的Root，在左邊將要作為Root的骨格點右鍵，\"Set Retarget Root\"\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/10.png?raw=true)\n\n\n右邊欄下面有個\"IK Retargeting\"的分頁，點開後選擇\"Add New Chain\"\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/11.png?raw=true)\n\n這時會有以下介面，Chain Name就是這個部位的名稱，Start Bone跟End Bone就是這個部位的開始骨骼及結束骨骼，而Retarget System的對接方式，就是將A骨架中的部位名稱對應到B骨架的部位名稱來執行動畫，因此骨架中的部位切分的越精細，呈現出來的動畫違和感就越少\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/12.png?raw=true)\n\n這邊就依照自己的規劃去設定部位\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/13.png?raw=true)\n\n設定完成後儲存，接下來到另一個要對接的骨架，從★開始做一樣的動作，請注意**作為Root的骨格部位請選擇相同部位，骨格名稱不一定會相同，請透過視覺判斷**，而部位的名稱建議設定一樣，到時候在對接的時候才比較好設定\n\n## IK Retargeter\n資料夾空白處右鍵：Animation -> IK Rig -> IK Retargeter，建立完檔案後打開\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/14.png?raw=true)\n\n右邊可以選擇Source IKRig跟Target IKRig(途中的A和B)，這邊設定時要搞清楚對象，這邊設定的意思是**要將A骨架的動畫檔案輸出成B骨架可使用的動畫檔案**\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/15.png?raw=true)\n\n右下方有個Chain Mapping的分頁，點開後就開始將對應的部位設定好，如圖所示\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/16.png?raw=true)\n\n設定完成後存檔，然後點選右下方的Asset Browser分頁，這邊會列出所有A骨架的動畫，選擇想要給B骨架使用的動畫後(可複選)，選擇\"Export Select Animations\"，選擇要輸出的目標資料夾後，按\"Export\"\n\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/17.png?raw=true)\n![](https://github.com/Kura0913/Blog-image/blob/main/RetargetSystem/18.png?raw=true)\n\n在目標資料夾會有新的動畫檔案，這些動畫檔按就是B骨架能夠使用的檔案，透過以上方式，就能讓不同的骨架適用其他骨架的動畫了\n\n\n文章內容參考自 Youtube:[Animation Retargeting In UE5 | New IK Rig Retargeting System (Tutorial)](https://www.youtube.com/watch?v=N7WdyAeeDrw)","tags":["Unreal Engine","Retarget System"],"categories":["Unreal Engine","Retarget System"]},{"title":"Unreal Engine：GPU Lightmass 全域照明","url":"/2023/09/21/GPULightmass/","content":"# 前言\nGPU Lightmass插件是一個 light-baking的解決方案，可預先計算移動性設定為「固定」或「靜態」的燈光的複雜光影，並將該資料儲存在應用於場景幾何體的產生的光照貼圖紋理中。GPU Lightmass 顯著減少了計算、建構和產生複雜場景的照明資料所需的時間，其速度與使用 Swarm 和基於 CPU 的 Lightmass 的分散式建構相當，是一個相當利於開發的工具，接下來便開始GPU Lightmass的安裝教學。\n<!-- more -->\n\n# 啟用插件\n打開想要增加此功能的專案，點選 Edit -> Plugin \n\n![](https://github.com/Kura0913/Blog-image/blob/main/GPULightmass/1.png?raw=true)\n\n在搜尋欄打GPU，找到GPU Lightmass，左邊勾選啟用插件，接下來會要求重啟專案，依照指示重啟\n\n![](https://github.com/Kura0913/Blog-image/blob/main/GPULightmass/2.png?raw=true)\n\n重啟過後插件便已經安裝完成\n\n# 專案設定\n\n接下來必須做一些設定讓GPU Lightmass可以順利啟用，點選 Edit -> Project settings\n\n![](https://github.com/Kura0913/Blog-image/blob/main/GPULightmass/3.png?raw=true)\n\nEngine -> Rendering -> Hardware Ray Tracing，依照圖中的設定勾選 \n\n![](https://github.com/Kura0913/Blog-image/blob/main/GPULightmass/4.png?raw=true)\n\nEngine -> Rendering -> Virtual Texture，依照圖中的設定勾選\n\n![](https://github.com/Kura0913/Blog-image/blob/main/GPULightmass/5.png?raw=true)\n\n完成設定後，依照指示重啟專案\n\n# 更改系統配置\nGPU執行命令時間過長時，Windows會認為顯示卡已經崩潰，並會重置驅動程序，導致引擎關閉。為了避免此情況，透過變更 Windows 登錄中的逾時偵測和復原 (TDR) 時間，可以增加 Windows 偵測到 GPU 逾時所需的時間。按Win + R 開啟執行，輸入\"regedit\" 開啟登錄編輯程式，導覽至類別:\n\n```\nComputer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\GraphicsDrivers\n```\n\n\n查看是否有名為\"TdrDelay\"的變數，沒有則空白處點擊右鍵，新增 -> DWORD(32-位元)值，將名稱命名為:TdrDelay\n\n![](https://github.com/Kura0913/Blog-image/blob/main/GPULightmass/6.png?raw=true)\n\n建立完成後點擊兩下開啟\"TdrDelay\"，選擇10進位，數值資料輸入60(可自行調整)，完成後按確定\n\n![](https://github.com/Kura0913/Blog-image/blob/main/GPULightmass/7.png?raw=true)\n\n這樣就能防止Unreal Engine在使用該插件時，因為執行的時間過長而導致關閉，若因為專案地圖過大，建置時間拉長還是發生了關閉的狀況，把TdrDelay的時間拉長即可\n\n\n# 使用 GPU Lightmass\n\n完成設定後就能正常使用GPU Lightmass，打開專案，Build -> GPU Lightmass\n\n![](https://github.com/Kura0913/Blog-image/blob/main/GPULightmass/8.png?raw=true)\n\n點選左上方的Build Lighting就會開始建置光影，而下方的設定則可以參考[官方文件](https://docs.unrealengine.com/4.27/en-US/RenderingAndGraphics/RayTracing/MovieRenderQueue/#systemconfiguration_optionalbutrecommended_)來依據需求做調整\n\n![](https://github.com/Kura0913/Blog-image/blob/main/GPULightmass/9.png?raw=true)\n\n","tags":["Unreal Engine"],"categories":["Unreal Engine","GPU Lightmass"]},{"title":"Unreal Engine創建新專案","url":"/2023/08/06/CreateNewProject/","content":"\n\n# 前言\n安裝好Unreal Engine之後，接下來就要開始開發了，本篇會介紹建立專案時，有哪一些設定可以調整，來幫助你在開發的時候，可以更加的舒適、便利\n\n<!-- more -->\n\n# 開啟引擎\n首先打開Epic Game Launcher，並到Unreal Engine的介面，對欲用來開發的引擎版本按啟動(若還沒安裝引擎，可以至[本篇](https://kura0913.github.io/2023/07/07/UnrealEngineInstall/))\n\n![](https://github.com/Kura0913/Blog-image/blob/main/CreateNewProject/1.png?raw=true)\n\n# 建立新專案\n\n啟動之後，會跳出選擇或創建專案的視窗，圖中1號紅框處是本機所有不同版本的專案，如果沒有就會是空的，2號紅框處除了第一個是現有專案選項外，其他都是用來創立專案用，根據想開發的內容來選擇對應的起始專案，創立出來的專案也會提供相關的基礎模型、示範功能等等內容，對於新手開發者來說是相當有幫助的\n\n![](https://github.com/Kura0913/Blog-image/blob/main/CreateNewProject/2.png?raw=true)\n\n以Games作為示範，點選Games之後，中間還有其他更細的分類，就依自己想開發的遊戲類型作選擇，如果你夠老練可以選擇Blank，Blank不會提供任何的範例\n\n![](https://github.com/Kura0913/Blog-image/blob/main/CreateNewProject/3.png?raw=true)\n\n這邊就選擇Third Person作為專案，接下來看到右邊有好幾個選項，會一一介紹對應的功能：\n\n* **1.Blueprint or C++:**\n這邊是用來選擇預設的開發模式，Blueprint是將程式碼模塊化，這些模塊也是透過C++設計出來的功能，透過拉線連接模塊來設計功能；C++就是直接用程式碼來進行開發，你可以透過程式碼來設計角色、物件的功能，甚至是製作專屬的Blueprint模塊，C++模式同時也能使用Blueprint模式，遇到比較簡單的設計可以用Blueprint偷懶一下。這邊建議剛接觸Unreal Engine的新手先選用Blueprint，使用一段時間對於Blueprint模塊較為熟悉後，再轉到C++開發，會發現有很多內建Function名稱與模塊是對應的，學習起來比較輕鬆。\n* **2.Target Platform:**\n依據最終想匯出的目標平台做選擇\n* **3.Quality Present:**\n設定專案開發時的測試影像品質，預設是Maximum，如果想要使用自訂的設定，可以選擇Scalable\n* **4.Starter Content:**\n如果想要使用所有Unreal Engine內建提供的物件，可以把這個選項打勾，物件相關的檔案就會在創建專案時順便匯入\n* **5.Raytracing:**\n選擇是否啟用光線追蹤的功能\n\n![](https://github.com/Kura0913/Blog-image/blob/main/CreateNewProject/4.png?raw=true)\n\n最後設定好專案的儲存路徑及專案名稱，點選Create\n\n![](https://github.com/Kura0913/Blog-image/blob/main/CreateNewProject/5.png?raw=true)\n\n創建完成之後，會自動開啟專案，可以按\"Alt+p\"執行看看專案是否正常\n\n![](https://github.com/Kura0913/Blog-image/blob/main/CreateNewProject/6.png?raw=true)\n![](https://github.com/Kura0913/Blog-image/blob/main/CreateNewProject/7.png?raw=true)\n\n成功執行代表專案建立成功，可以開始開發了~\n\n","tags":["Unreal Engine"],"categories":["Unreal Engine","創建新專案"]},{"title":"Unreal Engine設定及除錯","url":"/2023/07/20/UnrealEngineSetting/","content":"# 前言\n這些都是我在開發的過程中，有遇到需要調整的項目，之後如果有遇到新的問題，也會持續更新在這篇文章\n\n<!-- more -->\n\n\n# Visual Studio版本更改\n\n有些人使用的Visual Studio版本或許不是2022的版本，或是使用其他的編譯器，但又不想重新下載，其實是有解決辦法的，點擊左上角\nEdit->Editor Preferences->General->Source code， 會看到\"Source Code Editor\"，點開來改成自己想使用的編譯器就行了\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineSetting/Setting_1.png?raw=true)\n\n# 解決切換畫面後，畫面卡頓問題\n\n在模擬的時候常常會畫面切來切去，但只要一點到Unreal以外的視窗，模擬的畫面就會非常卡頓，這時可以透過更改設定來解決，\nEdit->Editor Preferences->General->Performance，把\"Use Less CPU when in Background\"取消掉，就可以解決這個問題\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineSetting/Setting_2.png?raw=true)\n\n# 打包地圖缺失\n\n打包地圖的時候，可能會遇到地圖只打包了你正在使用的地圖，或是預設地圖，此時就要透過設定來修改打包的目標，**建議每次的打包，都要執行接下來的設定**\nEdit->Project Settings->Project->Maps & Modes，下方有個\"Default Maps\"的設定，建議將Editor Startup Map和Game Default Map都換成執行檔開啟執行時，第一張要執行的地圖\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineSetting/Setting_3.png?raw=true)\n\n接著，到Project->Packaging->Packaging->Advanced，有一個\"List of maps to include in a packaged build\"的選項，點擊\"加號\"之後，到專案的資料夾下找出想打包的地圖，有幾張就加幾張\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineSetting/Setting_4.png?raw=true)\n\n這樣打包時就會把在List裡的地圖通通打包進去\n\n# 開啟檔案失敗\n在執行C++專案時，如果專案是有換過電腦執行，可能會出現以下錯誤:\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineSetting/GetPathFaild.png?raw=true)\n\n上面會顯示在某個路徑上無法找到\"YourProjectName.uproject\"的檔案\n\n正常來說，在移動完專案之後， 會對\"YourProjectName.uproject\"點擊右鍵，選擇\"Generate Visual Studio project files\"重新生成專案文件，在這個過程中檔案相關的路徑也會被更新，但是有時候啟動檔的路徑不會被更新到，這時候就要手動調整\n\n啟動檔的路徑儲存在 **.\\YourProjectFolder\\Intermediate\\ProjectFiles\\YourProjectName.vcxproj.user**\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineSetting/GetPathFaild1.png?raw=true)\n\n把這個檔案打開會有下列內容，其中紅色框框處就是啟動檔的路徑\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineSetting/GetPathFaild2.png?raw=true)\n\n這邊有兩個選擇：\n\n* 1、改成現在電腦上的路徑\n\n* 2、改成相對路徑\n\n我個人推薦第2種方法，可以避免之後專案移動時又發生一樣的問題\n\n修改方式就是將紅色框框處的路徑改為：($SolutionDir)YourProjectName.uproject\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineSetting/GetPathFaild3.png?raw=true)\n\n修改後儲存，專案就可以順利啟動","tags":["Unreal Engine"],"categories":["Unreal Engine","Unreal Engine 設定相關"]},{"title":"Airsim更換Actor","url":"/2023/07/17/AirsimChangeCharacter/","content":"# 前言\n\n使用過AirSim之後，你是否感受到它的強大了呢?AirSim可以提供相當多元的輔助，在深度學習、機器學習方面尤其明顯。\n\nAirSim提供的功能固然好用，但是有時還是會有需要自己新增一些功能到Actor上面或是更換成自己設計的Actor，但是卻找不到從哪邊下手更改，因此本篇將會教你如何將自己設計的Actor與AirSim連接，以及更改AirSim提供的Actor\n\n**以下教學使用UE5作為示範**\n\n<!-- more -->\n\n# 前置準備\n很簡單，請先準備好一個已經安裝好AirSim Plugin的專案，還沒安裝的朋友，可以參考[此篇](https://kura0913.github.io/2023/07/08/InstallAirSimPlugin/)，這邊就不贅述\n\n# 找到Plugin資料夾\n\n\n首先，要找到名為Plugin的資料夾，預設情況下是不會出現的，先打開Content Browser，右上角有個\"Settings\"，點開後會看到\"Show Plugin Content\"選項\n\n![](https://github.com/Kura0913/Blog-image/blob/main/AirsimChangeCharacter/findPlugin_1.png?raw=true)\n\n把他勾起來就可以看到\"Plugin\"的資料夾囉\n\n![](https://github.com/Kura0913/Blog-image/blob/main/AirsimChangeCharacter/findPlugin_2.png?raw=true)\n\n# 為AirSim的Actor增加功能\n\n打開\"Plugin/AirSim Content/Blueprints\"，這邊會看到一些Blueprint檔案，這些就是AirSim在模擬的時候會調用的檔案，我們用\"BP_FlyingPawn\"示範，對要編輯的檔案點右鍵，\"Duplicate\"\n\n![](https://github.com/Kura0913/Blog-image/blob/main/AirsimChangeCharacter/EditAirSimActor_1.png?raw=true)\n\n重新命名完之後按存檔，打開剛剛複製的檔案，在這邊就可以加上自己想要的功能囉!\n\n![](https://github.com/Kura0913/Blog-image/blob/main/AirsimChangeCharacter/EditAirSimActor_2.png?raw=true)\n\n\n或許你會疑問，為甚麼要特別複製?不能直接對原本的檔案做修改嗎?\n**答案是可以的**，但為了確保在自製的過程中不會出差錯，這邊建議還是預留一份原檔在專案內，不然到時候出問題無法復原又要到別的地方翻檔案來補，顯得更麻煩\n\n# 更換AirSim的Actor\n\n設計好自己專屬的Actor之後，接下來就是用AirSim來控制它，這邊就要去修改AirSim的設定檔，預設路徑為:C:\\Users\\user_name\\Documents\\AirSim，裡面會有一個\"setting.json\"的檔案，打開它，內容預設應該是如下:\n\n```\n{\n  \"SeeDocsAt\": \"https://github.com/Microsoft/AirSim/blob/master/docs/settings.md\",\n  \"SettingsVersion\": 1.2,\n  \"SimMode\": \"\"\n}\n\n```\n\n我們可以在這個檔案裏面加入設定去更改AirSim執行時要使用的AirSim載具、相機大小、物理特性等等，以及本篇的核心，**更換成自製的載具**\n\n我們需要將設定改成：\n```\n{\n  \"SeeDocsAt\": \"https://github.com/Microsoft/AirSim/blob/master/docs/settings.md\",\n  \"SettingsVersion\": 1.2,\n  \"SimMode\": \"Multirotor\",\n  \"PawnPaths\": {\n    \"BareboneCar\": {\"PawnBP\": \"Class'/AirSim/VehicleAdv/Vehicle/VehicleAdvPawn.VehicleAdvPawn_C'\"},\n    \"DefaultCar\": {\"PawnBP\": \"Class'/AirSim/VehicleAdv/SUV/SuvCarPawn.SuvCarPawn_C'\"},\n    \"DefaultQuadrotor\": {\"PawnBP\": \"Class'/AirSim/Blueprints/BP_FlyingPawn.BP_FlyingPawn_C'\"},\n    \"DefaultComputerVision\": {\"PawnBP\": \"Class'/AirSim/Blueprints/BP_ComputerVisionPawn.BP_ComputerVisionPawn_C'\"}\n  }\n}\n```\n\n加上之後，接下來我們要知道你自己設計的Actor的相對路徑，你可以將屬標只在你的Actor上，就會看到它的Path\n\n![](https://github.com/Kura0913/Blog-image/blob/main/AirsimChangeCharacter/ChangeActor_1.png?raw=true)\n\n\n在更改\"setting.json\"的時候，我們將SimMode改成\"Multirotor\"，意思是將模擬的載具設定成四軸無人機(Quadrotor)，因此我們要將對應的PawnPaths換掉，這邊我要換成的物件路徑是:\n\n/AirSim/Blueprints/BP_DroneCharacter.<font color=#FF0000>BP_DroneCharacter_C</font>\n\n其中紅色的部分是在生成的時候，你想讓該物件在地圖上叫甚麼名稱，就改在這邊\n\n將上面的路徑覆蓋掉\"DefaultQuadrotor\"的路徑變成：\n```\n{\n  \"SeeDocsAt\": \"https://github.com/Microsoft/AirSim/blob/master/docs/settings.md\",\n  \"SettingsVersion\": 1.2,\n  \"SimMode\": \"Multirotor\",\n  \"PawnPaths\": {\n    \"BareboneCar\": {\"PawnBP\": \"Class'/AirSim/VehicleAdv/Vehicle/VehicleAdvPawn.VehicleAdvPawn_C'\"},\n    \"DefaultCar\": {\"PawnBP\": \"Class'/AirSim/VehicleAdv/SUV/SuvCarPawn.SuvCarPawn_C'\"},\n    \"DefaultQuadrotor\": {\"PawnBP\": \"Class'/AirSim/Blueprints/BP_DroneCharacter.BP_DroneCharacter_C'\"},\n    \"DefaultComputerVision\": {\"PawnBP\": \"Class'/AirSim/Blueprints/BP_ComputerVisionPawn.BP_ComputerVisionPawn_C'\"}\n  }\n}\n```\n\n改完之後按存檔，接著回到專案直接按\"alt+p\"開始模擬，模擬時如果想顯示滑鼠可以按\"shift+F1\"，看到右邊的Item Label，可以看到我們正在操作的是剛剛設定的物件\n\n![](https://github.com/Kura0913/Blog-image/blob/main/AirsimChangeCharacter/ChangeActor_2.png?raw=true)\n\n你也可以點擊該物件右邊的藍字，前往該物件的Blueprint，進一步確認是否為你設定的物件\n\n![](https://github.com/Kura0913/Blog-image/blob/main/AirsimChangeCharacter/ChangeActor_3.png?raw=true)\n\n以上就是這次的教學，如果你對於\"setting.json\"內部還有哪些設定感興趣，可以參考[此連結](https://github.com/microsoft/AirSim/blob/main/docs/settings.md)\n\n","tags":["Unreal Engine","Airsim"],"categories":["Unreal Engine","AirSim","Airsim更換Actor"]},{"title":"Unreal Engine 調整Material的顏色","url":"/2023/07/11/UnrealEngineMaterialColor/","content":"# 前言\n在建立Level的時候，會調用到很多Static Mesh、Actor來裝飾地圖，而在建立地圖的途中，可能會遇到\n\n怎麼沒有我要的模型?或是模型是對了，但是顏色卻不是你想要的，這時可以選擇重新做一個Texture，優點當然是可以為物件做一個全新的顏色設計，而且精細度可以依個人需要去做調整。\n\n但是，如果沒有3D建模的專業的人怎麼辦?這時候就適合使用接下來要教學的方法，這個方法只會調整Texture的顏色，本來設計好的紋路是不會去動到的，那麼話不多說，開始本篇的教學\n\n<!-- more -->\n\n# 基於原本的Texture，調整Material顏色教學\n\n首先，我們先找到想要調整的Material，這邊以圖中的\"MI_jcGrdLineA\"做示範，點擊兩下打開\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor1.png?raw=true)\n\n如果打開是以下畫面的話就參考接下來的步驟，如果是Blueprint畫面，則可以直接跳至★\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor2.png?raw=true)\n\n接下來，右邊欄有一個\"BaceColor\"，是這個Material檔案套用的Texture，點擊檔名下方的\"前往資料夾\"，就會跳到存放Texture的地方\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor3.png?raw=true)\n\n這邊先把Texture的路徑記下來，然後回到\"MI_jcGrdLineA\"，右邊欄有一個\"Parent\"，接下來自己製作Material的時候，要基於這個\"Parent\"的設計結構，最後顯示出來的紋路才會跟原本的一樣，因此我們一樣點選檔名下方的\"前往資料夾\"，並打開該檔案，應該會看到Blueprint畫面，如果不是，就基於上述方法繼續往上找\"Parent\"，直到打開的頁面為Blueprint為止，這邊的\"Parent\"的檔名為\"MM_opacity\"\n\n\n## ★\n打開後，整個Blueprint就是模板，等等要基於此模板來設計，全選之後先放著\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor4.png?raw=true)\n\n到要存放新的Material的資料夾點擊右鍵，選擇\"Material\"\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor5.png?raw=true)\n\n取好名字後打開，會看到以下畫面\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor6.png?raw=true)\n\n回到\"MM_opacity\"(your Parent file)，把剛剛框起來部分複製，然後貼到剛剛自己建立的Material貼上，貼上後你會發現線全部斷掉了，這是正常的，請依據\"MM_opacity\"(your Parent file)的設計連上\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor7.png?raw=true)\n\n按住鍵盤第一排的3，在空白處點左鍵，對出現的方塊點右鍵，選擇圖中紅色框框中的選項，並為他取一個你認得出來的名字，這邊取名為\"Tint_colour\"\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor8.png?raw=true)\n\n按住鍵盤第一排的1，在空白處點左鍵，對出現的方塊點右鍵，選擇圖中紅色框框中的選項，並為他取一個你認得出來的名字，這邊取名為\"Tint_Intensity\"\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor9.png?raw=true)\n\n在空白處點右鍵，搜尋\"Multiply\"，叫出方塊，在空白處再點一下右鍵，搜尋\"Blend_Overlay\"，同樣叫出方塊，然後將線連接成下圖\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor10.png?raw=true)\n\n如果連接會用到\"Opacity Mask\"節點，則點選棕色方塊，到左邊欄找到\"Blend Mode\"選項，調成\"Mask\"來啟用節點\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor11.png?raw=true)\n\n點擊名為\"BaceColor\"的方塊，這時左下角可以找到一個可以選擇Texture的地方，將前面記下的Texture匯入，匯入成功後，紅色框框處都會變成你所選的Texture，完成後就可以存檔了\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor12.png?raw=true)\n\n回到自己建立的Material的資料夾，對自己建立的Material按右鍵，選擇紅色框框的選項，點選後會建立一個新的Material，取好名字後打開\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor13.png?raw=true)\n\n將右欄的\"Parent\"改為前面自己建立的Material\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor14.png?raw=true)\n\n此時右欄會出現剛剛我們做的設定，將他們打勾就可以啟用了\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor15.png?raw=true)\n\n這邊就示範幾種顏色\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor16.png?raw=true)\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor17.png?raw=true)\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineMaterialColor/MaterialColor18.png?raw=true)\n\n稍微玩過之後就可以發現，\"Tint_colour\"可以用來做初步的選擇顏色，\"Tint_Intensity\"可以做後續的亮度調整，接下來就套用到原先的物件上，挑出自己滿意的顏色吧~\n\n以上參考自:[https://www.youtube.com/watch?v=M1olxyt7Zw8](https://www.youtube.com/watch?v=M1olxyt7Zw8)","tags":["Unreal Engine"],"categories":["Unreal Engine","Material"]},{"title":"架設AirSim環境及安裝AirSim Plugin","url":"/2023/07/08/InstallAirSimPlugin/","content":"# 前言\nAirSim Plugin是基於Unreal Engine用來做汽車、無人機模擬的插件，支援使用流行的飛行控制器（例如 PX4 和 ArduPilot）進行software-in-the-loop simulation，以及使用 PX4 進行hardware-in-loop，以實現物理和視覺上的真實模擬。\n\n詳細介紹可參考[AirSIm github](https://github.com/microsoft/AirSim)\n\n<!-- more -->\n\n# 前置作業\n在安裝AirSim前，你必須完成Unreal Engine的安裝，安裝方式請看[Unreal Engine安裝](https://kura0913.github.io/2023/07/07/UnrealEngineInstall/)\n\n\n\n# 安裝Git\n至[Git官網](https://git-scm.com/)下載最新版的Git，並且一定要安裝 Git Bash 功能\n(之後會再寫一篇安裝Git與Github連結設定的教學)\n\n# 安裝 Visual Studio 2022\n點擊[連結](https://visualstudio.microsoft.com/zh-hant/vs/)下載 Visual Studio 2022，免費版請選擇Community版本\n\n安裝完成後，請安裝下圖中的組態\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/VSinstall_1.png?raw=true)\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/VSinstall_2.png?raw=true)\n\n安裝完成後，可以點擊修改，檢查組態是否安裝完整，**特別至個別元件檢查是否安裝到\"Windows 10 SDK 10.0.19041\"**\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/VSinstall_3.png?raw=true)\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/VSinstall_4.png?raw=true)\n\n\n# 安裝 AirSim\n\n**接下來的步驟相當繁瑣，請按照步驟安裝，否則可能會安裝失敗**\n\n操作流程可以參考[官方文件](https://microsoft.github.io/AirSim/build_windows/)\n\n根據安裝的引擎版本，請分別至對應的連結：[4.X.X](https://github.com/microsoft/AirSim)、[5.X.X](https://github.com/CodexLabsLLC/Colosseum)\n\n**註：目前得知Unreal Engine 5.0.3無法成功安裝AirSim，UE5版本選擇請選擇5.1以上**\n\n接下來會以UE5的連結做示範，進到頁面後，先點選\"Code\"，然後複製網址\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_1.png?raw=true)\n\n接下來到要安裝AirSim環境的資料夾，點選右鍵，Git Bash Here，<font color=#FF0000>**請注意，絕對不可以安裝在C槽，路徑要全英文**</font>\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_2.png?raw=true)\n\n打上下列指令：\nUE5:\n```\ngit clone https://github.com/CodexLabsLLC/Colosseum.git\n```\n\nUE4:\n```\ngit clone https://github.com/microsoft/AirSim.git\n```\n看到下圖代表已經下載完成\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_3.png?raw=true)\n\n開啟\"Developer Command Prompt for VS 2022\"，用\"cd your_file_path\"前往安裝AirSim環境的目錄下\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_4.png?raw=true)\n\n輸入\"build\"，等待它安裝，會需要一段時間\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_5.png?raw=true)\n\n看到顯示下圖字樣，代表建置完成\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_6.png?raw=true)\n\n接著，可以點擊資料夾目錄下的Unreal，會看到一個名叫\"Plugins\"的資料夾，在未來如果你的UE5(UE4)專案需要使用到AirSim，將此資料夾複製到該專案裡面，該專案就能使用AirSim Plugin\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_7.png?raw=true)\n\n接下來要來確認 AirSim 的環境是可以正常運作的，在與\"Plugins\"資料夾同一個目錄下，點選\"Environments\"，裡面有一個預設專案\"Blocks\"，內部已經安裝好了AirSim Plugin\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_8.png?raw=true)\n\n打開\"Block\"專案，查看是否有一個名叫\"Blocks.sln\"的檔案，如果沒有，可以對\"Blocks.uproject\"按右鍵，選擇\"Generate Visual Studio project files\"來生成\"Blocks.sln\"\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_9.png?raw=true)\n\n接下來，打開\"Blocks.sln\"，將偵錯模式改成\"Development Editor\"，再按執行\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_10.png?raw=true)\n\n你有可能會出現類似以下敘述的錯誤\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/issue1.png?raw=true)\n\n代表Visual Studio組件版本無法對上，通常會發生在已經使用一段時間的Visual Studio環境，最快的辦法就是整個Visual Studio重新安裝，可以使用匯出組件功能來保留你的環境\n\n執行成功後，便會開啟專案\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_11.png?raw=true)\n\n進一步確定是否完整安裝，按下\"Alt + p\"或是綠色播放鍵，會顯示以下畫面：\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_12.png?raw=true)\n\n這邊是在詢問要使用哪種交通工具進行模擬，AirSim內建提供了 Car 以及 Multirotor 可以選擇，點選\"Yes\"會使用 Car 來模擬，點選\"No\"會使用 Multirotor 來模擬，兩個都選選看是否能正常運作，如果能正常執行沒有報錯的話，代表安裝成功啦~\n\nMultirotor模擬畫面\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_13.png?raw=true)\n\nCar模擬畫面\n\n![](https://github.com/Kura0913/Blog-image/blob/main/InstallAirSimPlugin/AirSimInstall_14.png?raw=true)\n","tags":["Unreal Engine","Airsim"],"categories":["Unreal Engine","AirSim","Airsim環境架設"]},{"title":"Unreal Engine安裝","url":"/2023/07/07/UnrealEngineInstall/","content":"# 前言\n\nUnreal Engine是一款由Epic Games開發的遊戲引擎。該引擎主要是為了開發第一人稱射擊遊戲而設計，但現在已經被成功地應用於開發類比遊戲、恐怖遊戲、角色扮演遊戲等多種不同類型的遊戲\n\n虛幻引擎除了被用於開發遊戲，現在也用於電影的虛擬製片、建商虛擬導覽等用途\n\nUnreal Engine詳細介紹請至[官方文檔](https://www.unrealengine.com/en-US/unreal-engine-5)\n\n<!-- more -->\n\n# 安裝前的注意事項\n主要是電腦硬體方面，建議需要準備以下兩個硬體：\n\n1、除了C槽以外的磁碟500GB以上\n\n2、獨立顯示卡(建議規格在GTX 1060以上)\n\n第一個磁碟要求是最基本的，不管是UE4或UE5的Project，在引用官方套件的時候，一不注意就會變得超級大，長期下來，硬碟空間很快就消耗殆盡了；獨立顯卡除了在執行、測試的階段需要用到外，開發過程有時也可以透過Plugin用GPU來代替CPU加速運算，節省開發時間。\n\n# Unreal Engine安裝教學\n\n至[Epic Game官網](https://store.epicgames.com/en-US/)下載Epic Game Launcher，點擊右上角Download\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineInstall/UE5_1.png?raw=true)\n\n點擊執行檔安裝完成之後，註冊並登入Epic Game Launcher\n\n登入之後，點擊左方的「Unreal Engine」\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineInstall/UE5_2.png?raw=true)\n\n選擇上方列的「遊戲庫」\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineInstall/UE5_3.png?raw=true)\n\n點選引擎版本旁邊的加號，選擇欲安裝的版本及路徑，路徑建議在除了C槽以外的地方，且<font color=#FF0000>**路徑要全英文！路徑要全英文！路徑要全英文！**</font>\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineInstall/UE5_4.png?raw=true)\n\n安裝完成後，點選啟動，看到以下畫面就代表安裝成功囉！\n\n![](https://github.com/Kura0913/Blog-image/blob/main/UnrealEngineInstall/UE5_5.png?raw=true)","tags":["Unreal Engine"],"categories":["Unreal Engine","Unreal Engine安裝"]}]